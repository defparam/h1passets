#!/usr/bin/python3
#
# h1passets is a tool that prints all private program assets that are in-scope and eligible for bounty
#
# Authors: defparam, Abss, martinbydefault
#
# MIT License
# 
# Copyright (c) 2020 defparam, Abss, martinbydefault
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import sys
import requests
import base64
import json

categories = {
	"url" 	  	: ["URL"],
	"mobile"  	: ["GOOGLE_PLAY_APP_ID", "OTHER_APK", "APPLE_STORE_APP_ID"],
	"android"	: ["GOOGLE_PLAY_APP_ID", "OTHER_APK"],
	"apple"   	: ["APPLE_STORE_APP_ID"],
	"other"   	: ["OTHER"],
	"hardware"	: ["HARDWARE"],
	"all"		: ["GOOGLE_PLAY_APP_ID", "OTHER_APK", "APPLE_STORE_APP_ID", "URL", "OTHER", "HARDWARE"]
}

def get_h1_graphql_token(hostsession):
	hdrs = {"Cookie": "__Host-session="+hostsession,
	"Content-type": "application/json", 
	"Host": "hackerone.com",
	"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)",
	"Accept": "*/*"}
	resp = requests.get('https://hackerone.com/current_user/graphql_token',headers=hdrs)
	jsn = json.loads(resp.text)
	if (jsn['graphql_token'] == "----"):
		print ("Error: The supplied HackerOne __Host-session token appears to be invalid.")
		exit(1)
	return jsn['graphql_token']
	
	
def get_h1_assets(token, handle, category):
	GET_ASSETS_QUERY = "eyJxdWVyeSI6InF1ZXJ5IFRlYW1fYXNzZXRzKCRmaXJzdF8wOkludCEpIHtxdWVyeSB7aWQsLi4uRjB9fSBmcmFnbWVudCBGMCBvbiBRdWVyeSB7bWUge19tZW1iZXJzaGlwX0E6bWVtYmVyc2hpcCh0ZWFtX2hhbmRsZTpcIl9fUkVQTEFDRU1FX19cIikge3Blcm1pc3Npb25zLGlkfSxpZH0sX3RlYW1fQTp0ZWFtKGhhbmRsZTpcIl9fUkVQTEFDRU1FX19cIikge2hhbmRsZSxfc3RydWN0dXJlZF9zY29wZV92ZXJzaW9uc19BOnN0cnVjdHVyZWRfc2NvcGVfdmVyc2lvbnMoYXJjaGl2ZWQ6ZmFsc2UpIHttYXhfdXBkYXRlZF9hdH0sX3N0cnVjdHVyZWRfc2NvcGVzX0I6c3RydWN0dXJlZF9zY29wZXMoZmlyc3Q6JGZpcnN0XzAsYXJjaGl2ZWQ6ZmFsc2UsZWxpZ2libGVfZm9yX3N1Ym1pc3Npb246dHJ1ZSkge2VkZ2VzIHtub2RlIHtpZCxhc3NldF90eXBlLGFzc2V0X2lkZW50aWZpZXIscmVuZGVyZWRfaW5zdHJ1Y3Rpb24sbWF4X3NldmVyaXR5LGVsaWdpYmxlX2Zvcl9ib3VudHl9LGN1cnNvcn0scGFnZUluZm8ge2hhc05leHRQYWdlLGhhc1ByZXZpb3VzUGFnZX19LF9zdHJ1Y3R1cmVkX3Njb3Blc19DOnN0cnVjdHVyZWRfc2NvcGVzKGZpcnN0OiRmaXJzdF8wLGFyY2hpdmVkOmZhbHNlLGVsaWdpYmxlX2Zvcl9zdWJtaXNzaW9uOmZhbHNlKSB7ZWRnZXMge25vZGUge2lkLGFzc2V0X3R5cGUsYXNzZXRfaWRlbnRpZmllcixyZW5kZXJlZF9pbnN0cnVjdGlvbn0sY3Vyc29yfSxwYWdlSW5mbyB7aGFzTmV4dFBhZ2UsaGFzUHJldmlvdXNQYWdlfX0saWR9LGlkfSIsInZhcmlhYmxlcyI6eyJmaXJzdF8wIjo1MDB9fQ=="
	query = base64.b64decode(GET_ASSETS_QUERY)
	query = query.replace(b"__REPLACEME__", handle.encode())
	hdrs = {"X-Auth-Token": token,
		"Content-type": "application/json", 
		"Host": "hackerone.com",
		"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)",
		"Accept": "*/*"}
	resp = requests.post('https://hackerone.com/graphql',headers=hdrs,data=query)
	data = json.loads(resp.text)
	
	for elem in data["data"]["query"]["_team_A"]["_structured_scopes_B"]["edges"]:
			if elem["node"]["asset_type"] in categories[category]:
				if elem["node"]["eligible_for_bounty"] == True:
					print (str(elem["node"]["asset_identifier"]))

def get_h1_privassets(token, catagory):
	H1_XAUTH_TOKEN = token
	PRIV_PROG_QUERY = "eyJxdWVyeSI6InF1ZXJ5IFRlYW1fYXNzZXRzKCRmaXJzdF8wOkludCEpIHtxdWVyeSB7aWQsLi4uRjB9fSBmcmFnbWVudCBGMCBvbiBRdWVyeSB7bWUge19tZW1iZXJzaGlwX0E6bWVtYmVyc2hpcCh0ZWFtX2hhbmRsZTpcIl9fUkVQTEFDRU1FX19cIikge3Blcm1pc3Npb25zLGlkfSxpZH0sX3RlYW1fQTp0ZWFtKGhhbmRsZTpcIl9fUkVQTEFDRU1FX19cIikge2hhbmRsZSxfc3RydWN0dXJlZF9zY29wZV92ZXJzaW9uc19BOnN0cnVjdHVyZWRfc2NvcGVfdmVyc2lvbnMoYXJjaGl2ZWQ6ZmFsc2UpIHttYXhfdXBkYXRlZF9hdH0sX3N0cnVjdHVyZWRfc2NvcGVzX0I6c3RydWN0dXJlZF9zY29wZXMoZmlyc3Q6JGZpcnN0XzAsYXJjaGl2ZWQ6ZmFsc2UsZWxpZ2libGVfZm9yX3N1Ym1pc3Npb246dHJ1ZSkge2VkZ2VzIHtub2RlIHtpZCxhc3NldF90eXBlLGFzc2V0X2lkZW50aWZpZXIsbWF4X3NldmVyaXR5LGVsaWdpYmxlX2Zvcl9ib3VudHl9LGN1cnNvcn0scGFnZUluZm8ge2hhc05leHRQYWdlLGhhc1ByZXZpb3VzUGFnZX19LF9zdHJ1Y3R1cmVkX3Njb3Blc19DOnN0cnVjdHVyZWRfc2NvcGVzKGZpcnN0OiRmaXJzdF8wLGFyY2hpdmVkOmZhbHNlLGVsaWdpYmxlX2Zvcl9zdWJtaXNzaW9uOmZhbHNlKSB7ZWRnZXMge25vZGUge2lkLGFzc2V0X3R5cGUsYXNzZXRfaWRlbnRpZmllcn0sY3Vyc29yfSxwYWdlSW5mbyB7aGFzTmV4dFBhZ2UsaGFzUHJldmlvdXNQYWdlfX0saWR9LGlkfSIsInZhcmlhYmxlcyI6eyJmaXJzdF8wIjo1MDB9fQ=="	
	query = json.loads(base64.b64decode(PRIV_PROG_QUERY).decode('utf-8'))
	last_cursor = ""
	
	while(1):
		query["variables"]["cursor"] = last_cursor
		hdrs = {"X-Auth-Token": H1_XAUTH_TOKEN,
		"Content-type": "application/json", 
		"Host": "hackerone.com",
		"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)",
		"Accept": "*/*"}
		resp = requests.post('https://hackerone.com/graphql',headers=hdrs,data=json.dumps(query))
		data = json.loads(resp.text)
		
		if len(data["data"]["teams"]["edges"]) == 0:
			break
		
		for edge in data["data"]["teams"]["edges"]:
			last_cursor = edge["cursor"]
			handle = edge["node"]["handle"]
			if edge["node"]["state"] == "public_mode":
				continue
			get_h1_assets(H1_XAUTH_TOKEN, handle, catagory)

if __name__ == "__main__":
	if (len(sys.argv) != 2 and len(sys.argv) != 3):
		print ("Usage: h1passets <Your HackerOne __Host-session Token> <catagory>")
		print ("Catagories: url, mobile, android, apple, other, hardware, all (default: url)")
		exit(1)
	
	host_session_token = sys.argv[1]
	if len(sys.argv) == 2:
		catagory = "url"
	else:
		catagory = sys.argv[2].lower()
	
	if not catagory in categories: 
		print ("Usage: h1passets <Your HackerOne __Host-session Token> <catagory>")
		print ("Catagories: url, mobile, android, apple, other, hardware, all (default: url)")
		exit(1)	
	
	graphql_token = get_h1_graphql_token(host_session_token)
	get_h1_privassets(graphql_token, catagory)
